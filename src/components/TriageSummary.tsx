import React from 'react';
import './TriageSummary.css';

export type SummaryMetric = {
  label: string;
  value: string | number;
  trend?: 'up' | 'down' | 'flat';
  helperText?: string;
};

export type RiskIndicator = {
  label: string;
  level: 'low' | 'medium' | 'high';
  description: string;
};

export interface TriageSummaryProps {
  title?: string;
  metrics: SummaryMetric[];
  risks?: RiskIndicator[];
  recommendations?: string[];
}

const levelToClassName: Record<RiskIndicator['level'], string> = {
  low: 'risk-indicator risk-low',
  medium: 'risk-indicator risk-medium',
  high: 'risk-indicator risk-high'
};

const trendToSymbol: Record<NonNullable<SummaryMetric['trend']>, string> = {
  up: '▲',
  down: '▼',
  flat: '■'
};

const TriageSummary: React.FC<TriageSummaryProps> = ({
  title = 'Triage Summary',
  metrics,
  risks = [],
  recommendations = []
}) => {
  return (
    <section className="triage-summary" aria-labelledby="triage-summary-heading">
      <header className="triage-summary__header">
        <h2 id="triage-summary-heading">{title}</h2>
        <p className="triage-summary__subtitle">
          Key metrics, risk indicators, and next steps generated by the triage pipeline.
        </p>
      </header>

      <div className="triage-summary__metrics" role="list">
        {metrics.map((metric) => (
          <article key={metric.label} className="triage-summary__metric" role="listitem">
            <span className="triage-summary__metric-label">{metric.label}</span>
            <span className="triage-summary__metric-value">
              {metric.value}
              {metric.trend ? (
                <span className={`triage-summary__metric-trend trend-${metric.trend}`} aria-hidden="true">
                  {trendToSymbol[metric.trend]}
                </span>
              ) : null}
            </span>
            {metric.helperText ? (
              <span className="triage-summary__metric-helper">{metric.helperText}</span>
            ) : null}
          </article>
        ))}
      </div>

      {risks.length > 0 ? (
        <div className="triage-summary__risks" role="list">
          <h3>Risk Indicators</h3>
          {risks.map((risk) => (
            <div key={risk.label} className={levelToClassName[risk.level]} role="listitem">
              <strong>{risk.label}</strong>
              <span className="risk-description">{risk.description}</span>
            </div>
          ))}
        </div>
      ) : null}

      {recommendations.length > 0 ? (
        <div className="triage-summary__recommendations" role="list">
          <h3>Recommended Actions</h3>
          <ul>
            {recommendations.map((recommendation) => (
              <li key={recommendation}>{recommendation}</li>
            ))}
          </ul>
        </div>
      ) : null}
    </section>
  );
};

export default TriageSummary;
